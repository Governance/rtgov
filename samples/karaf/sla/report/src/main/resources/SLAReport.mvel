/**
 * SLA Report
 *
 * Properties:
 *		serviceType (string) 	- the service type
 *		operation (string)		- the optional operation name, if not specified then checks all ops on service
 *		principal (string)		- the optional principal
 *		start (long)			- the start date/time
 *		end	(long)				- the end date/time
 *		maxResponseTime (long)	- the maximum response time before SLA violated
 *		averagedDuration (long) - optional duration over which response times should be averaged
 *		calendar (string)		- the optional calendar name
 *		timezone (string)		- the optional timezone
 */

import org.overlord.rtgov.reports.model.Report;
import org.overlord.rtgov.reports.model.Tabular;
import org.overlord.rtgov.reports.model.Tabular.Header;
import org.overlord.rtgov.reports.model.Tabular.Row;
import org.overlord.rtgov.reports.model.Tabular.Summary;
import org.overlord.rtgov.activity.model.ActivityType;
import org.overlord.rtgov.activity.model.soa.RequestReceived;
import org.overlord.rtgov.activity.model.soa.ResponseSent;

// FUNCTION DEFINITIONS

def calcResponseTime(request, pos, activities) {
	ResponseSent response=null;
	
	// Find accompanying response
	for (int j=pos+1; response == null && j < activities.size(); j++) {
	
		if (activities.get(j) instanceof ResponseSent &&
				activities.get(j).getReplyToId() != null &&
				activities.get(j).getReplyToId().equals(request.getMessageId())) {
			response = activities.get(j);
		}
	}
	
	context.logDebug("Checking response time for req="+request+" resp="+response);
	
	if (response != null) {
		context.logDebug("Reponse time="+(response.timestamp-request.timestamp));
		return (response.timestamp - request.timestamp);
	}
	
	return 0;
}

// MAIN SCRIPT

// Get the relevant properties
start = properties.get("start");
end = properties.get("end");
long maxResponseTime = Long.parseLong(properties.get("maxResponseTime"));
long averagedDuration = properties.containsKey("averagedDuration") ? Long.parseLong(properties.get("averagedDuration")) : 0;

// Create date formatter based on optionally specified timezone
java.text.DateFormat formatter=java.text.DateFormat.getDateTimeInstance(java.text.DateFormat.MEDIUM, java.text.DateFormat.FULL);

java.util.TimeZone tz=null;
if (properties.containsKey("timezone")) {
	tz = java.util.TimeZone.getTimeZone(properties.get("timezone"));
}
if (tz == null) {
	tz = java.util.TimeZone.getDefault();
}

formatter.setTimeZone(tz);

// Obtain the calendar
calendar = context.getCalendar(properties.get("calendar"), properties.get("timezone"));

// Initialize the report
report = new Report().setTitle("SLA Report")
		.setCreated(formatter.format(new java.util.Date(System.currentTimeMillis())));

section = new Tabular();
report.sections.add(section);

section.header = new Header();
section.header.columnNames.add("Date/Time");
section.header.columnNames.add("Response Time(ms)");


return report;
