<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs title="Call Trace" description="Call Trace gadget"
		author="Jeff Yu" author_email="jeff.yuchang@gmail.com">
		<Require feature="tabs"/>
		<Require feature="setprefs"/>
		<Require feature="dynamic-height" />
	</ModulePrefs>
	<UserPref name="value" display_name="Value:" default_value="" />
	<UserPref name="refreshCycle" display_name="Refresh Interval(sec):"
		default_value="30" datatype="enum">
		<EnumValue value="30" />
		<EnumValue value="60" />
		<EnumValue value="120" />
		<EnumValue value="180" />
		<EnumValue value="300" />
	</UserPref>

	<Content type="html"><![CDATA[
	<style type="text/css">
		#promptDiv {width:90%;font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 9pt;margin:10px;}
		#tree {width:90%;}
		#detail {width:90%; border:1px solid #69C; border-collapse: collapse;font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 9pt;margin:10px;}
		#detail thead th {font-weight: normal;font-size: 9pt; color:#039;border-bottom: 1px dashed #69C; text-align: left;}
		#detail tbody td {text-align:left; font-size:9pt; vertical-align: top;color: #669; padding: 2px 2px; }
		#detail tbody th {text-align: right; font-size:9pt; vertical-align: top;color: #669; padding: 2px 2px; }
		.detail-properties {border-bottom: 1px dashed #69C; font-size:9pt; }
   </style>
   
	<link href="skin/ui.dynatree.css" rel="stylesheet" type="text/css">
	<link href="tabs.css" rel="stylesheet" type="text/css">
	<script type="text/javascript" src="jquery.min.js"></script>
	<script type="text/javascript" src="jquery.cookie.js"></script>
	<script type="text/javascript" src="jquery-ui.custom.min.js"></script>
	<script type="text/javascript" src="jquery.dynatree.min.js"></script>
	<script type="text/javascript" src="gs-common.js"></script>
   
   <script type="text/javascript">
	
	var tabset;
	
	function makeJSONRequest(){
		var prefs = new gadgets.Prefs();
		//hack for now.
        var protocol = parent.window.location.protocol;
	    var host = parent.window.location.host;
	    var ident = getUserPreferenceValue("value");
	    
	    if (ident == "" || ident == " ") {
	    	$("#promptDiv").show();
	    	return;
	    } else {
	    	$("#promptDiv").hide();
	    }
	    
	    var restUrl = protocol + "//" + host + "/overlord-rtgov/call/trace/instance?value=" + ident;
	    
		var params = {};
		params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
		params[gadgets.io.RequestParameters.REFRESH_INTERVAL] = parseInt(getUserPreferenceValue("refreshCycle"));
		params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;
   		
   		gadgets.io.makeRequest(restUrl, updateResponse, params);
	}
	
	function updateResponse(response) {
		var treeData;
		var data = response.data;
		if (data == undefined || data == "undefined") {
			treeData={};
		} else {
		   	treeData = new Array(data.tasks.length);
		   	for(var i = 0; i < treeData.length; i++) {
		   		var task = data.tasks[i];
		   		treeData[i] = convertJsonToTreeData(task);
		   	}
		}
	   	initialiseTree(treeData);
	}
	
	  function convertJsonToTreeData(task) {
	  	    var treeObject = {};
	  		var isCall = (task.type == "Call");
	  		if (isCall) {
	  			treeObject["title"] = getCallTypeTitle(task);
	  			treeObject["isFolder"] = true;
	  			treeObject["request"] = escapeHTML(task.request);
	  			treeObject["response"] = escapeHTML(task.response);
	  			treeObject["fault"] = escapeHTML(task.fault);
	  			treeObject['component'] = task.component;
	  			treeObject['operation'] = task.operation;
	  			treeObject['duration'] = task.duration;
	  			treeObject['percentage'] = task.percentage;
	  			treeObject['interface'] = task.interface;
	  			treeObject['type'] = task.type;
	  			if (task.status == "Warning") {
	  				treeObject['addClass'] = 'warning';
	  			} else if (task.status == "Fail") {
	  				treeObject['addClass'] = 'error';
	  			} else {
	  				treeObject['addClass'] = 'success';
	  			}

	  		} else {
	  			treeObject["title"] = getTaskTypeTitle(task);
	  			treeObject["isFolder"] = false;
	  			treeObject['description'] = task.description;
	  			treeObject['duration'] = task.duration;
	  			treeObject['percentage'] = task.percentage;
	  			treeObject['type'] = task.type;
	  			if (task.status == "Warning") {
	  				treeObject['addClass'] = 'warning';
	  			} else if (task.status == "Fail") {
	  				treeObject['addClass'] = 'error';
	  			} else {
		  			treeObject['addClass'] = 'task';
				}
	  		}
	  		
	  		if (task.properties != undefined) {
	  			treeObject['properties'] = task.properties;
	  		}

	  		if (task.tasks != undefined) {
	  			var children = new Array(task.tasks.length);
	  			for (var i = 0; i < task.tasks.length; i++) {
	  				var theTask = task.tasks[i];
	  				children[i] = convertJsonToTreeData(theTask);
	  			}
	  			treeObject["children"] = children;
	  		}
	  		return treeObject;

  }
  
  	  function getCallTypeTitle(task) {
  	  	var title = getTruncatedTitle(task.operation + ":" + task.component);
  	  	if (task.duration != undefined) {
  	  		title = title + "[" + task.duration + "ms]";
  	  	}
  	  	if (task.percentage != undefined) {
  	  		title = title + "(" + task.percentage + "%)";
  	  	}
  	  	return title;
  	  }

  	  function getTaskTypeTitle(task) {
  	  	var title = getTruncatedTitle(task.description);
  	  	if (task.duration != undefined) {
  	  		title = title + "[" + task.duration + "ms]";
  	  	}
  	  	if (task.percentage != undefined) {
  	  		title = title + "(" + task.percentage + "%)";
  	  	}
  	  	return title;
  	  }

	  function initialiseTree(data) {	  	
	    // Attach the dynatree widget to an existing <div id="tree"> element
	    // and pass the tree options as an argument to the dynatree() function:
	  	$("#tree").dynatree({
	  		onActivate: function(node) {showTheDetail(node);},
	  		children: data
	  	});
	  }
	
	  function showTheDetail(node) {
	  	  tabset.setSelectedTab(1);
	  	  var properties = ['type', 'component', 'interface', 'operation', 'request', 'response', 'fault', 'requestLatency', 'responseLatency', 'duration', 'percentage'];
	  	  var thedata = node.data;
	  	  deleteRows();
	  	  for(i = 0; i < properties.length; i++) {
	  	  	var theProperty = properties[i];
	  	  	if (thedata[theProperty] != undefined) {
	  	  		insertRow([theProperty + " :" , thedata[theProperty]]);
	  	  	}
	  	  }
	  	  
	  	  if (thedata.properties != undefined) {
	  	  	    insertPropertiesTitle();
 				for (var pname in thedata.properties) {
 					if (thedata.properties.hasOwnProperty(pname)) {
 						insertRow([pname + ":", thedata.properties[pname]]);
 					}
 				}
	  	  }
	  	  
	  	  //gadgets.window.adjustHeight();
	  	  
	  }
	
	   function deleteRows() {
			var theBody, theSize, i;
			theBody = document.getElementById("detail-body");
			theSize = theBody.rows.length;
			for (i = 0; i < theSize; i++) {
				theBody.deleteRow(theBody.rows[i]);
			}
		}

	function insertRow(data) {
		var theBody, theRow, theHead, theCell, i;
		theBody = document.getElementById("detail-body");
		theRow = document.createElement("TR");
		theBody.appendChild(theRow);
		
		theHead = document.createElement("TH");
		theHead.innerHTML = data[0];
		theHead.setAttribute("width", "35%");
		theRow.appendChild(theHead);

		theCell = document.createElement("TD");
		theCell.innerHTML = data[1];
		theRow.appendChild(theCell);
	}
	
	function getTruncatedTitle(title) {
		if (title.length < 25) return title;
		else return title.substring(0, 25) + "...";
	}

	function escapeHTML(str) {
		if (str == undefined) return;
   		else return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
	}
	
	function insertPropertiesTitle() {
	  	var theBody, theRow, theCell;
	  	theBody = document.getElementById("detail-body");
	  	theRow = document.createElement("TR");
	  	theBody.appendChild(theRow);

	  	theCell = document.createElement("TD");
	  	theCell.setAttribute("colspan", "2");
	  	theCell.setAttribute("class", "detail-properties");
	  	theCell.innerHTML = "Properties";
	  	theRow.appendChild(theCell);
	 }
	
	function loadData() {
         var prefs, refreshInterval;
         prefs = new gadgets.Prefs();
         refreshInterval = parseInt(getUserPreferenceValue("refreshCycle"));
         
         tabset = new gadgets.TabSet();
         tabset.alignTabs('left');
         tabset.addTab("Call Trace Tree", {contentContainer:document.getElementById("tree")});
         tabset.addTab("Details", {contentContainer:document.getElementById("detail")});
         makeJSONRequest();
         setInterval(makeJSONRequest, refreshInterval * 1000);
    }

    gadgets.util.registerOnLoadHandler(loadData);

   </script>
    <div id="promptDiv">Please set the Identifier field in the Preference setting by clicking the setting button!</div>
  	<div id="tree"></div>
  	<div id="detail">
		<table style="width:95%" summary="Summary">
			<thead><tr><th colspan="2">Summary</th></tr></thead>
			<tbody id="detail-body">						
			</tbody>
	   </table>
  	</div>
]]>
	</Content>
</Module>
